/* tslint:disable */
/* eslint-disable */
/*
Lambda Cloud API

API for interacting with the Lambda GPU Cloud

The version of the OpenAPI document: 1.5.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponseBody } from '../models';
// @ts-ignore
import { KeyAddSshKeyRequest } from '../models';
// @ts-ignore
import { KeyAddSshKeyResponse } from '../models';
// @ts-ignore
import { KeyGetListResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * KeyApi - axios parameter creator
 * @export
 */
export const KeyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add an SSH key  To use an existing key pair, enter the public key for the `public_key` property of the request body.  To generate a new key pair, omit the `public_key` property from the request body. Save the `private_key` from the response somewhere secure. For example, with curl:  ``` curl https://cloud.lambdalabs.com/api/v1/ssh-keys \\   --fail \\   -u ${LAMBDA_API_KEY}: \\   -X POST \\   -d \'{\"name\": \"new key\"}\' \\   | jq -r \'.data.private_key\' > key.pem  chmod 400 key.pem ```  Then, after you launch an instance with `new key` attached to it: ``` ssh -i key.pem <instance IP> ``` 
         * @summary Add SSH key
         * @param {KeyAddSshKeyRequest} keyAddSshKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSshKey: async (keyAddSshKeyRequest: KeyAddSshKeyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyAddSshKeyRequest' is not null or undefined
            assertParamExists('addSshKey', 'keyAddSshKeyRequest', keyAddSshKeyRequest)
            const localVarPath = `/ssh-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: keyAddSshKeyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ssh-keys',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(keyAddSshKeyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the list of SSH keys
         * @summary List SSH keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ssh-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ssh-keys',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KeyApi - functional programming interface
 * @export
 */
export const KeyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KeyApiAxiosParamCreator(configuration)
    return {
        /**
         * Add an SSH key  To use an existing key pair, enter the public key for the `public_key` property of the request body.  To generate a new key pair, omit the `public_key` property from the request body. Save the `private_key` from the response somewhere secure. For example, with curl:  ``` curl https://cloud.lambdalabs.com/api/v1/ssh-keys \\   --fail \\   -u ${LAMBDA_API_KEY}: \\   -X POST \\   -d \'{\"name\": \"new key\"}\' \\   | jq -r \'.data.private_key\' > key.pem  chmod 400 key.pem ```  Then, after you launch an instance with `new key` attached to it: ``` ssh -i key.pem <instance IP> ``` 
         * @summary Add SSH key
         * @param {KeyApiAddSshKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSshKey(requestParameters: KeyApiAddSshKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeyAddSshKeyResponse>> {
            const keyAddSshKeyRequest: KeyAddSshKeyRequest = {
                name: requestParameters.name,
                public_key: requestParameters.public_key
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSshKey(keyAddSshKeyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the list of SSH keys
         * @summary List SSH keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeyGetListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * KeyApi - factory interface
 * @export
 */
export const KeyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KeyApiFp(configuration)
    return {
        /**
         * Add an SSH key  To use an existing key pair, enter the public key for the `public_key` property of the request body.  To generate a new key pair, omit the `public_key` property from the request body. Save the `private_key` from the response somewhere secure. For example, with curl:  ``` curl https://cloud.lambdalabs.com/api/v1/ssh-keys \\   --fail \\   -u ${LAMBDA_API_KEY}: \\   -X POST \\   -d \'{\"name\": \"new key\"}\' \\   | jq -r \'.data.private_key\' > key.pem  chmod 400 key.pem ```  Then, after you launch an instance with `new key` attached to it: ``` ssh -i key.pem <instance IP> ``` 
         * @summary Add SSH key
         * @param {KeyApiAddSshKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSshKey(requestParameters: KeyApiAddSshKeyRequest, options?: AxiosRequestConfig): AxiosPromise<KeyAddSshKeyResponse> {
            return localVarFp.addSshKey(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the list of SSH keys
         * @summary List SSH keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(options?: AxiosRequestConfig): AxiosPromise<KeyGetListResponse> {
            return localVarFp.getList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addSshKey operation in KeyApi.
 * @export
 * @interface KeyApiAddSshKeyRequest
 */
export type KeyApiAddSshKeyRequest = {
    
} & KeyAddSshKeyRequest

/**
 * KeyApiGenerated - object-oriented interface
 * @export
 * @class KeyApiGenerated
 * @extends {BaseAPI}
 */
export class KeyApiGenerated extends BaseAPI {
    /**
     * Add an SSH key  To use an existing key pair, enter the public key for the `public_key` property of the request body.  To generate a new key pair, omit the `public_key` property from the request body. Save the `private_key` from the response somewhere secure. For example, with curl:  ``` curl https://cloud.lambdalabs.com/api/v1/ssh-keys \\   --fail \\   -u ${LAMBDA_API_KEY}: \\   -X POST \\   -d \'{\"name\": \"new key\"}\' \\   | jq -r \'.data.private_key\' > key.pem  chmod 400 key.pem ```  Then, after you launch an instance with `new key` attached to it: ``` ssh -i key.pem <instance IP> ``` 
     * @summary Add SSH key
     * @param {KeyApiAddSshKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyApiGenerated
     */
    public addSshKey(requestParameters: KeyApiAddSshKeyRequest, options?: AxiosRequestConfig) {
        return KeyApiFp(this.configuration).addSshKey(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the list of SSH keys
     * @summary List SSH keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyApiGenerated
     */
    public getList(options?: AxiosRequestConfig) {
        return KeyApiFp(this.configuration).getList(options).then((request) => request(this.axios, this.basePath));
    }
}
