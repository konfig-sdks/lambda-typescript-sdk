/* tslint:disable */
/* eslint-disable */
/*
Lambda Cloud API

API for interacting with the Lambda GPU Cloud

The version of the OpenAPI document: 1.5.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponseBody } from '../models';
// @ts-ignore
import { InstanceCreateInstancesRequest } from '../models';
// @ts-ignore
import { InstanceCreateInstancesResponse } from '../models';
// @ts-ignore
import { InstanceGetDetailsResponse } from '../models';
// @ts-ignore
import { InstanceListRunningInstancesResponse } from '../models';
// @ts-ignore
import { InstanceRestartInstancesRequest } from '../models';
// @ts-ignore
import { InstanceRestartInstancesResponse } from '../models';
// @ts-ignore
import { InstanceTerminateInstanceRequest } from '../models';
// @ts-ignore
import { InstanceTerminateInstanceResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * InstanceApi - axios parameter creator
 * @export
 */
export const InstanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Launches one or more instances of a given instance type.
         * @summary Launch instances
         * @param {InstanceCreateInstancesRequest} instanceCreateInstancesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInstances: async (instanceCreateInstancesRequest: InstanceCreateInstancesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'instanceCreateInstancesRequest' is not null or undefined
            assertParamExists('createInstances', 'instanceCreateInstancesRequest', instanceCreateInstancesRequest)
            const localVarPath = `/instance-operations/launch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: instanceCreateInstancesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/instance-operations/launch',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(instanceCreateInstancesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves details of a specific instance, including whether or not the instance is running. 
         * @summary List details of a specific instance
         * @param {string} id The unique identifier (ID) of the instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDetails', 'id', id)
            const localVarPath = `/instances/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/instances/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a detailed list of running instances.
         * @summary List running instances
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRunningInstances: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/instances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/instances',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Restarts the given instances.
         * @summary Restart instances
         * @param {InstanceRestartInstancesRequest} instanceRestartInstancesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restartInstances: async (instanceRestartInstancesRequest: InstanceRestartInstancesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'instanceRestartInstancesRequest' is not null or undefined
            assertParamExists('restartInstances', 'instanceRestartInstancesRequest', instanceRestartInstancesRequest)
            const localVarPath = `/instance-operations/restart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: instanceRestartInstancesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/instance-operations/restart',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(instanceRestartInstancesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Terminates a given instance.
         * @summary Terminate an instance
         * @param {InstanceTerminateInstanceRequest} instanceTerminateInstanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateInstance: async (instanceTerminateInstanceRequest: InstanceTerminateInstanceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'instanceTerminateInstanceRequest' is not null or undefined
            assertParamExists('terminateInstance', 'instanceTerminateInstanceRequest', instanceTerminateInstanceRequest)
            const localVarPath = `/instance-operations/terminate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: instanceTerminateInstanceRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/instance-operations/terminate',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(instanceTerminateInstanceRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InstanceApi - functional programming interface
 * @export
 */
export const InstanceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InstanceApiAxiosParamCreator(configuration)
    return {
        /**
         * Launches one or more instances of a given instance type.
         * @summary Launch instances
         * @param {InstanceApiCreateInstancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInstances(requestParameters: InstanceApiCreateInstancesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstanceCreateInstancesResponse>> {
            const instanceCreateInstancesRequest: InstanceCreateInstancesRequest = {
                region_name: requestParameters.region_name,
                instance_type_name: requestParameters.instance_type_name,
                ssh_key_names: requestParameters.ssh_key_names,
                file_system_names: requestParameters.file_system_names,
                quantity: requestParameters.quantity,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createInstances(instanceCreateInstancesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves details of a specific instance, including whether or not the instance is running. 
         * @summary List details of a specific instance
         * @param {InstanceApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: InstanceApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstanceGetDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a detailed list of running instances.
         * @summary List running instances
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRunningInstances(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstanceListRunningInstancesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRunningInstances(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Restarts the given instances.
         * @summary Restart instances
         * @param {InstanceApiRestartInstancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restartInstances(requestParameters: InstanceApiRestartInstancesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstanceRestartInstancesResponse>> {
            const instanceRestartInstancesRequest: InstanceRestartInstancesRequest = {
                instance_ids: requestParameters.instance_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.restartInstances(instanceRestartInstancesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Terminates a given instance.
         * @summary Terminate an instance
         * @param {InstanceApiTerminateInstanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async terminateInstance(requestParameters: InstanceApiTerminateInstanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstanceTerminateInstanceResponse>> {
            const instanceTerminateInstanceRequest: InstanceTerminateInstanceRequest = {
                instance_ids: requestParameters.instance_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.terminateInstance(instanceTerminateInstanceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InstanceApi - factory interface
 * @export
 */
export const InstanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InstanceApiFp(configuration)
    return {
        /**
         * Launches one or more instances of a given instance type.
         * @summary Launch instances
         * @param {InstanceApiCreateInstancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInstances(requestParameters: InstanceApiCreateInstancesRequest, options?: AxiosRequestConfig): AxiosPromise<InstanceCreateInstancesResponse> {
            return localVarFp.createInstances(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves details of a specific instance, including whether or not the instance is running. 
         * @summary List details of a specific instance
         * @param {InstanceApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: InstanceApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<InstanceGetDetailsResponse> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a detailed list of running instances.
         * @summary List running instances
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRunningInstances(options?: AxiosRequestConfig): AxiosPromise<InstanceListRunningInstancesResponse> {
            return localVarFp.listRunningInstances(options).then((request) => request(axios, basePath));
        },
        /**
         * Restarts the given instances.
         * @summary Restart instances
         * @param {InstanceApiRestartInstancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restartInstances(requestParameters: InstanceApiRestartInstancesRequest, options?: AxiosRequestConfig): AxiosPromise<InstanceRestartInstancesResponse> {
            return localVarFp.restartInstances(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Terminates a given instance.
         * @summary Terminate an instance
         * @param {InstanceApiTerminateInstanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateInstance(requestParameters: InstanceApiTerminateInstanceRequest, options?: AxiosRequestConfig): AxiosPromise<InstanceTerminateInstanceResponse> {
            return localVarFp.terminateInstance(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createInstances operation in InstanceApi.
 * @export
 * @interface InstanceApiCreateInstancesRequest
 */
export type InstanceApiCreateInstancesRequest = {
    
} & InstanceCreateInstancesRequest

/**
 * Request parameters for getDetails operation in InstanceApi.
 * @export
 * @interface InstanceApiGetDetailsRequest
 */
export type InstanceApiGetDetailsRequest = {
    
    /**
    * The unique identifier (ID) of the instance
    * @type {string}
    * @memberof InstanceApiGetDetails
    */
    readonly id: string
    
}

/**
 * Request parameters for restartInstances operation in InstanceApi.
 * @export
 * @interface InstanceApiRestartInstancesRequest
 */
export type InstanceApiRestartInstancesRequest = {
    
} & InstanceRestartInstancesRequest

/**
 * Request parameters for terminateInstance operation in InstanceApi.
 * @export
 * @interface InstanceApiTerminateInstanceRequest
 */
export type InstanceApiTerminateInstanceRequest = {
    
} & InstanceTerminateInstanceRequest

/**
 * InstanceApiGenerated - object-oriented interface
 * @export
 * @class InstanceApiGenerated
 * @extends {BaseAPI}
 */
export class InstanceApiGenerated extends BaseAPI {
    /**
     * Launches one or more instances of a given instance type.
     * @summary Launch instances
     * @param {InstanceApiCreateInstancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstanceApiGenerated
     */
    public createInstances(requestParameters: InstanceApiCreateInstancesRequest, options?: AxiosRequestConfig) {
        return InstanceApiFp(this.configuration).createInstances(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves details of a specific instance, including whether or not the instance is running. 
     * @summary List details of a specific instance
     * @param {InstanceApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstanceApiGenerated
     */
    public getDetails(requestParameters: InstanceApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return InstanceApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a detailed list of running instances.
     * @summary List running instances
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstanceApiGenerated
     */
    public listRunningInstances(options?: AxiosRequestConfig) {
        return InstanceApiFp(this.configuration).listRunningInstances(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Restarts the given instances.
     * @summary Restart instances
     * @param {InstanceApiRestartInstancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstanceApiGenerated
     */
    public restartInstances(requestParameters: InstanceApiRestartInstancesRequest, options?: AxiosRequestConfig) {
        return InstanceApiFp(this.configuration).restartInstances(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Terminates a given instance.
     * @summary Terminate an instance
     * @param {InstanceApiTerminateInstanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstanceApiGenerated
     */
    public terminateInstance(requestParameters: InstanceApiTerminateInstanceRequest, options?: AxiosRequestConfig) {
        return InstanceApiFp(this.configuration).terminateInstance(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
